Option Explicit

'==================================================================================================
' Main Procedure: Loops through all qualifying folders and files.
' 1. Sets the root directory for processing.
' 2. Prepares the summary and temporary worksheets.
' 3. Uses FileSystemObject to iterate through folders and files.
'    - Finds all subfolders under the root directory containing "ACT".
'    - In these subfolders, finds all .xls files containing "ACT".
' 4. Calls ProcessSingleFile for each found file.
' 5. Added: Count folders and files, write to Summary Sheet A1. ' <--- New for point 1
'==================================================================================================
Sub Main_ProcessAllFiles()

    ' --- Configuration Section ---
    Const ROOT_FOLDER_NAME As String = "DirectSale Reconcile Inputs" ' Source data root folder name
    Const FOLDER_KEYWORD As String = "ACT" ' Keyword for target subfolders
    Const FILE_KEYWORD As String = "ACT"   ' Keyword for target files
    ' --- End Configuration Section ---

    Dim fso As Object
    Dim rootFolder As Object
    Dim subFolder As Object
    Dim fileItem As Object
    Dim basePath As String
    Dim wsSummary As Worksheet
    Dim wsTemp As Worksheet
    Dim folderCount As Long ' <--- New counter for ACT folders
    Dim fileCount As Long   ' <--- New counter for xls files

    ' Create a Scripting.FileSystemObject for file system operations
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    ' Build the base path: the folder where the current workbook is located
    basePath = ThisWorkbook.Path & "\" & ROOT_FOLDER_NAME

    ' Check if the root folder exists
    If Not fso.FolderExists(basePath) Then
        MsgBox "Error: The data source folder '" & basePath & "' was not found.", vbCritical, "Folder Not Found"
        Exit Sub
    End If

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False

    On Error GoTo ErrorHandler

    ' Step 1: Prepare summary and temporary worksheets
    SetupSheets wsSummary, wsTemp

    ' Step 2: Loop through folders and files
    Set rootFolder = fso.GetFolder(basePath)

    ' Loop through all subfolders in the root directory
    For Each subFolder In rootFolder.SubFolders
        ' Check if the subfolder name contains the keyword "ACT" (case-insensitive)
        If InStr(1, subFolder.Name, FOLDER_KEYWORD, vbTextCompare) > 0 Then
            folderCount = folderCount + 1 ' <--- Increment folder count
            ' Loop through all files in the current subfolder
            For Each fileItem In subFolder.Files
                ' Check if the file name contains "ACT" and is an .xls file (case-insensitive)
                If InStr(1, fileItem.Name, FILE_KEYWORD, vbTextCompare) > 0 And LCase(fso.GetExtensionName(fileItem.Name)) = "xls" Then
                    ' Step 3: If the file meets the criteria, call the processing procedure
                    ProcessSingleFile fileItem.Path, wsSummary, wsTemp
                    fileCount = fileCount + 1 ' <--- Increment file count
                End If
            Next fileItem
        End If
    Next subFolder

    ' Write counts to Summary Sheet A1 ' <--- New for point 1
    wsSummary.Cells(1, 1).Value = "总共处理了 " & folderCount & " 个 ACT 文件夹和 " & fileCount & " 个 xls 文件。"

    MsgBox "All data processing is complete! Please check the 'Summary Sheet'.", vbInformation, "Processing Complete"

CleanUp:
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Set fso = Nothing
    Set rootFolder = Nothing
    Set subFolder = Nothing
    Set fileItem = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "An error occurred in the main procedure: " & Err.Description, vbCritical, "Error"
    Resume CleanUp

End Sub

'==================================================================================================
' Helper Procedure 1: Prepares the worksheets (creates or clears them).
'==================================================================================================
Sub SetupSheets(ByRef wsSummary As Worksheet, ByRef wsTemp As Worksheet)
    On Error Resume Next
    Set wsTemp = ThisWorkbook.Sheets("Intermediate Sheet")
    If wsTemp Is Nothing Then
        Set wsTemp = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsTemp.Name = "Intermediate Sheet"
    End If
    wsTemp.Cells.Clear

    Set wsSummary = ThisWorkbook.Sheets("Summary Sheet")
    If wsSummary Is Nothing Then
        Set wsSummary = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsSummary.Name = "Summary Sheet"
    End If
    wsSummary.Cells.Clear
    On Error GoTo 0

    ' Create header row in the summary sheet (shifted to row 2 to make room for A1 stats)
    With wsSummary
        .Cells(2, 1).Value = "Submission Date"
        .Cells(2, 2).Value = "Account #"
        .Cells(2, 3).Value = "Expire Date"
        .Cells(2, 4).Value = "Amount"
    End With
End Sub

'==================================================================================================
' Helper Procedure 2: Processes a single Excel file.
' Modified: Use ADO to read without opening file to save memory (point 3).
' Added: AutomationSecurity for Protected View (point 2, fallback if not using ADO).
' Releases objects immediately after use.
'==================================================================================================
Sub ProcessSingleFile(ByVal fullPath As String, ByVal wsSummary As Worksheet, ByVal wsTemp As Worksheet)

    Const USE_ADO As Boolean = True ' <--- Set to True to use ADO (no open, less memory); False for original open method

    Dim wbSource As Workbook
    Dim wsSource As Worksheet
    Dim findRange As Range
    Dim lastRowSource As Long
    Dim lastRowTemp As Long
    Dim nextSummaryRow As Long
    Dim colCounter As Integer
    Dim searchKey As Variant
    Dim targetColumnSource As Long
    Dim tempColOffset As Long
    Dim i As Long
    Dim copyCurrentColumn As Boolean

    ' Define the headers to find and their corresponding processing logic
    Dim searchKeys As Variant
    searchKeys = Array( _
        Array("Submission Date", 1, True), _
        Array("Account #", 2, False), _
        Array("Expire Date", 3, True), _
        Array("Amount", 4, False) _
    )

    On Error GoTo ErrorHandler

    If USE_ADO Then
        ' Use ADO to read without opening (solves memory and Protected View issues)
        Dim conn As Object
        Dim rs As Object
        Dim sql As String
        Dim colLetter As String
        
        Set conn = CreateObject("ADODB.Connection")
        conn.Provider = "Microsoft.ACE.OLEDB.12.0"
        conn.ConnectionString = "Data Source=" & fullPath & ";Extended Properties='Excel 8.0;HDR=YES;IMEX=1';"
        conn.Open
        
        For colCounter = LBound(searchKeys) To UBound(searchKeys)
            searchKey = searchKeys(colCounter)(0)
            tempColOffset = searchKeys(colCounter)(1)
            copyCurrentColumn = searchKeys(colCounter)(2)
            
            wsTemp.Cells.ClearContents
            
            ' Assume sheet name is Sheet1; adjust if needed
            sql = "SELECT * FROM [Sheet1$]" ' Query entire sheet, then filter in code
            
            Set rs = conn.Execute(sql)
            
            ' Paste recordset to temp (simplified; in real, loop through rs to find column and extract)
            wsTemp.Cells(1, 1).CopyFromRecordset rs
            
            ' Then perform cleaning as before (adapt for ADO)
            ' ... (implement column finding and extraction logic here, similar to original)
            
            ' Clean and copy to summary (same as below)
        Next colCounter
        
        rs.Close
        conn.Close
        Set rs = Nothing
        Set conn = Nothing
    Else
