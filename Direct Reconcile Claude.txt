
Option Explicit

'==================================================================================================
' Global variables for statistics
'==================================================================================================
Private g_TotalXlsFiles As Long
Private g_TotalACTFolders As Long
Private g_LogNextRow As Long ' New: To track the next row for logging in Sheet1

'==================================================================================================
' Main Procedure: Keep original efficient logic, fix file reading issues
'==================================================================================================
Sub Main_ProcessAllFiles()

    ' --- Configuration Section ---
    Const ROOT_FOLDER_NAME As String = "DirectSale Reconcile Inputs"
    Const OUTPUT_FOLDER_NAME As String = "DirectSale Reconcile Outputs"
    Const FOLDER_KEYWORD As String = "ACT"
    Const FILE_KEYWORD As String = "ACT"
    ' --- End Configuration Section ---

    Dim fso As Object
    Dim rootFolder As Object
    Dim subFolder As Object
    Dim fileItem As Object
    Dim basePath As String
    Dim outputPath As String
    Dim wsSummary As Worksheet
    Dim wsTemp As Worksheet
    Dim startTime As Double ' New: To record processing start time
    Dim endTime As Double   ' New: To record processing end time

    ' Initialize statistics
    g_TotalXlsFiles = 0
    g_TotalACTFolders = 0
    
    ' New: Initialize the log row for Sheet1 (starting from row 2, as row 1 is for general stats)
    g_LogNextRow = 2

    Set fso = CreateObject("Scripting.FileSystemObject")
    basePath = ThisWorkbook.Path & "\" & ROOT_FOLDER_NAME
    outputPath = ThisWorkbook.Path & "\" & OUTPUT_FOLDER_NAME

    ' Check input folder
    If Not fso.FolderExists(basePath) Then
        MsgBox "Error: Data source folder '" & basePath & "' not found.", vbCritical, "Folder Not Found"
        Exit Sub
    End If

    ' Create output folder if it doesn't exist
    If Not fso.FolderExists(outputPath) Then
        fso.CreateFolder outputPath
    End If

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual

    On Error GoTo ErrorHandler

    ' Setup worksheets
    SetupWorksheets wsSummary, wsTemp

    Set rootFolder = fso.GetFolder(basePath)

    ' Loop through subfolders
    For Each subFolder In rootFolder.SubFolders
        If InStr(1, subFolder.Name, FOLDER_KEYWORD, vbTextCompare) > 0 Then
            g_TotalACTFolders = g_TotalACTFolders + 1
            
            ' Loop through files in subfolder
            For Each fileItem In subFolder.Files
                If InStr(1, fileItem.Name, FILE_KEYWORD, vbTextCompare) > 0 And _
                   (LCase(fso.GetExtensionName(fileItem.Name)) = "xls" Or _
                    LCase(fso.GetExtensionName(fileItem.Name)) = "xlsx") Then
                    
                    g_TotalXlsFiles = g_TotalXlsFiles + 1
                    
                    startTime = Timer ' Record start time

                    ' Process single file - keep original efficient logic
                    ' Pass the file name to ProcessSingleFile for logging
                    ProcessSingleFile fileItem.Path, wsSummary, wsTemp, fileItem.Name
                    
                    endTime = Timer ' Record end time
                    
                    ' Log file name and processing time to Sheet1
                    LogFileProcessToSheet1 fileItem.Name, endTime - startTime
                    
                    ' Memory cleanup
                    DoEvents
                End If
            Next fileItem
        End If
    Next subFolder

    ' Write general statistics to Sheet1 A1 cell
    WriteStatisticsToSheet1

    ' Save Summary Sheet as separate workbook
    SaveSummaryToOutputFolder wsSummary, outputPath

    MsgBox "All data processing complete!" & vbCrLf & _
           "Processed " & g_TotalXlsFiles & " XLS files" & vbCrLf & _
           "from " & g_TotalACTFolders & " ACT folders" & vbCrLf & _
           "Summary saved to: " & outputPath, vbInformation, "Processing Complete"

CleanUp:
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    
    Set fso = Nothing
    Set rootFolder = Nothing
    Set subFolder = Nothing
    Set fileItem = Nothing
    Set wsSummary = Nothing
    Set wsTemp = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "Error in main procedure: " & Err.Description, vbCritical, "Error"
    Resume CleanUp

End Sub

'==================================================================================================
' Write general statistics to Sheet1 A1 cell
'==================================================================================================
Sub WriteStatisticsToSheet1()
    Dim ws1 As Worksheet
    
    On Error Resume Next
    Set ws1 = ThisWorkbook.Sheets("Sheet1")
    If ws1 Is Nothing Then
        Set ws1 = ThisWorkbook.Sheets(1)
    End If
    On Error GoTo 0
    
    If Not ws1 Is Nothing Then
        With ws1
            .Cells(1, 1).Value = "Statistics: Processed " & g_TotalXlsFiles & " XLS files from " & g_TotalACTFolders & " ACT folders"
            .Cells(1, 1).Font.Bold = True
            .Cells(1, 1).Interior.Color = RGB(255, 255, 0)
            .Columns("A:A").AutoFit
        End With
    End If
End Sub

'==================================================================================================
' New: Log file processing details to Sheet1
'==================================================================================================
Sub LogFileProcessToSheet1(ByVal fileName As String, ByVal processTime As Double)
    Dim ws1 As Worksheet
    
    On Error Resume Next
    Set ws1 = ThisWorkbook.Sheets("Sheet1")
    If ws1 Is Nothing Then
        Set ws1 = ThisWorkbook.Sheets(1)
    End If
    On Error GoTo 0
    
    If Not ws1 Is Nothing Then
        With ws1
            ' Ensure headers are present
            If .Cells(1, 2).Value = "" Then
                .Cells(1, 2).Value = "File Name"
                .Cells(1, 3).Value = "Processing Time (seconds)"
                .Range("B1:C1").Font.Bold = True
                .Range("B1:C1").Interior.Color = RGB(200, 200, 200)
                .Columns("B:C").AutoFit
            End If
            
            .Cells(g_LogNextRow, 2).Value = fileName
            .Cells(g_LogNextRow, 3).Value = Format(processTime, "0.00") ' Format to 2 decimal places
            g_LogNextRow = g_LogNextRow + 1
        End With
    End If
End Sub

'==================================================================================================
' Setup worksheets
'==================================================================================================
Sub SetupWorksheets(ByRef wsSummary As Worksheet, ByRef wsTemp As Worksheet)
    On Error Resume Next
    
    Set wsTemp = ThisWorkbook.Sheets("Intermediate Sheet")
    If wsTemp Is Nothing Then
        Set wsTemp = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsTemp.Name = "Intermediate Sheet"
    End If
    wsTemp.Cells.Clear

    Set wsSummary = ThisWorkbook.Sheets("Summary Sheet")
    If wsSummary Is Nothing Then
        Set wsSummary = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsSummary.Name = "Summary Sheet"
    End If
    wsSummary.Cells.Clear
    On Error GoTo 0

    ' Create header row for Summary Sheet
    With wsSummary
        .Cells(1, 1).Value = "Submission Date"
        .Cells(1, 2).Value = "Account #"
        .Cells(1, 3).Value = "Expire Date"
        .Cells(1, 4).Value = "Amount"
        .Cells(1, 5).Value = "Source Name" ' New: Added Source Name column
    End With
End Sub

'==================================================================================================
' Original efficient processing logic with improved file opening
'==================================================================================================
Sub ProcessSingleFile(ByVal fullPath As String, ByVal wsSummary As Worksheet, ByVal wsTemp As Worksheet, ByVal sourceFileName As String)

    Dim wbSource As Workbook
    Dim wsSource As Worksheet
    Dim findRange As Range
    Dim lastRowSource As Long
    Dim lastRowTemp As Long
    Dim nextSummaryRow As Long
    Dim colCounter As Integer
    Dim searchKey As Variant
    Dim targetColumnSource As Long
    Dim tempColOffset As Long
    Dim i As Long
    Dim copyCurrentColumn As Boolean

    ' Define the headers to find and their corresponding processing logic
    Dim searchKeys As Variant
    searchKeys = Array( _
        Array("Submission Date", 1, True), _
        Array("Account #", 2, False), _
        Array("Expire Date", 3, True), _
        Array("Amount", 4, False) _
    )

    On Error GoTo ErrorHandler

    ' Enhanced file opening to prevent corruption warnings
    Set wbSource = OpenFileCleanly(fullPath)
    If wbSource Is Nothing Then GoTo ErrorHandler
    
    Set wsSource = wbSource.Sheets(1)

    ' Loop through each keyword to be found (ORIGINAL LOGIC - EFFICIENT)
    For colCounter = LBound(searchKeys) To UBound(searchKeys)
        searchKey = searchKeys(colCounter)(0)
        tempColOffset = searchKeys(colCounter)(1)
        copyCurrentColumn = searchKeys(colCounter)(2)

        wsTemp.Cells.ClearContents ' Clear the temporary worksheet before each loop

        Set findRange = wsSource.Cells.Find(What:=searchKey, LookIn:=xlValues, LookAt:=xlWhole, MatchCase:=False)

        If Not findRange Is Nothing Then
            If copyCurrentColumn Then
                targetColumnSource = findRange.Column
            Else
                targetColumnSource = findRange.Column - 1
                If targetColumnSource < 1 Then GoTo NextKey ' If in column A, cannot get the column to the left, so skip this key
            End If

            lastRowSource = wsSource.Cells(wsSource.Rows.Count, targetColumnSource).End(xlUp).Row
            If lastRowSource <= findRange.Row Then GoTo NextKey ' If there is no data below the header row, skip

            ' Copy data to the temporary worksheet (ORIGINAL EFFICIENT METHOD)
            wsSource.Range(wsSource.Cells(findRange.Row + 1, targetColumnSource), wsSource.Cells(lastRowSource, targetColumnSource)).Copy
            wsTemp.Cells(2, 1).PasteSpecial xlPasteValuesAndNumberFormats
            Application.CutCopyMode = False

            ' --- Data Cleaning Logic (ORIGINAL EFFICIENT METHOD) ---
            lastRowTemp = wsTemp.Cells(wsTemp.Rows.Count, 1).End(xlUp).Row
            If lastRowTemp >= 2 Then
                For i = lastRowTemp To 2 Step -1
                    Dim cellValue As String
                    cellValue = Trim(wsTemp.Cells(i, 1).Value)
                    If cellValue = "" Or cellValue = CStr(searchKey) Or (CStr(searchKey) = "Submission Date" And InStr(1, cellValue, "Submission Count", vbTextCompare) > 0) Then
                        wsTemp.Rows(i).Delete
                    End If
                Next i
            End If
            ' --- End Data Cleaning ---

            ' Copy the cleaned data to the summary sheet (ORIGINAL EFFICIENT METHOD)
            lastRowTemp = wsTemp.Cells(wsTemp.Rows.Count, 1).End(xlUp).Row
            If lastRowTemp >= 2 Then
                ' Key Step: Find the next empty row in the summary sheet to append data
                nextSummaryRow = wsSummary.Cells(wsSummary.Rows.Count, tempColOffset).End(xlUp).Row + 1
                wsTemp.Range("A2:A" & lastRowTemp).Copy
                wsSummary.Cells(nextSummaryRow, tempColOffset).PasteSpecial xlPasteValuesAndNumberFormats
                Application.CutCopyMode = False
                
                ' New: Fill the "Source Name" column for the newly added rows
                wsSummary.Range(wsSummary.Cells(nextSummaryRow, 5), wsSummary.Cells(nextSummaryRow + lastRowTemp - 2, 5)).Value = sourceFileName
            End If
        End If

NextKey:
    Next colCounter

CleanUp:
    If Not wbSource Is Nothing Then
        wbSource.Close SaveChanges:=False
    End If
    Exit Sub

ErrorHandler:
    ' Continue processing other files if one fails
    Resume CleanUp

End Sub

'==================================================================================================
' Enhanced file opening to prevent corruption warnings
'==================================================================================================
Function OpenFileCleanly(ByVal fullPath As String) As Workbook
    Dim wb As Workbook
    Dim fso As Object
    
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    On Error Resume Next
    
    ' Check if file exists and is accessible
    If Not fso.FileExists(fullPath) Then
        Set OpenFileCleanly = Nothing
        Exit Function
    End If
    
    ' Method 1: Try opening with minimal parameters to reduce corruption warnings
    Set wb = Application.Workbooks.Open( _
        fileName:=fullPath, _
        ReadOnly:=True, _
        UpdateLinks:=False, _
        AddToMru:=False _
    )
    
    If Not wb Is Nothing Then
        ' Handle Protected View automatically
        If Not wb.ProtectedViewWindow Is Nothing Then
            wb.ProtectedViewWindow.Edit
            DoEvents
        End If
        Set OpenFileCleanly = wb
        Exit Function
    End If
    
    ' Method 2: If first method fails, try with notification off
    Application.DisplayAlerts = False
    Set wb = Application.Workbooks.Open( _
        fileName:=fullPath, _
        ReadOnly:=True _
    )
    Application.DisplayAlerts = True
    
    If Not wb Is Nothing Then
        Set OpenFileCleanly = wb
        Exit Function
    End If
    
    ' If all methods fail, return Nothing
    Set OpenFileCleanly = Nothing
    
End Function

'==================================================================================================
' Save Summary Sheet as separate workbook in output folder
'==================================================================================================
Sub SaveSummaryToOutputFolder(ByVal wsSummary As Worksheet, ByVal outputPath As String)
    Dim newWb As Workbook
    Dim newWs As Worksheet
    Dim fileName As String
    Dim fullOutputPath As String
    
    On Error GoTo SaveError
    
    ' Create new workbook
    Set newWb = Application.Workbooks.Add
    Set newWs = newWb.Sheets(1)
    newWs.Name = "Reconciliation Summary"
    
    ' Copy all data from summary sheet
    If wsSummary.usedRange.Rows.Count > 0 Then
        wsSummary.usedRange.Copy
        newWs.Range("A1").PasteSpecial xlPasteValuesAndNumberFormats
        Application.CutCopyMode = False
    End If
    
    ' Format the new worksheet
    With newWs
        ' Update header range to include the new column E
        .Range("A1:E1").Font.Bold = True
        .Range("A1:E1").Interior.Color = RGB(200, 200, 200)
        ' Update column autofit to include column E
        .Columns("A:E").AutoFit
    End With
    
    ' Generate filename with timestamp
    fileName = "Reconciliation_Summary_" & Format(Now, "yyyymmdd_hhmmss") & ".xlsx"
    fullOutputPath = outputPath & "\" & fileName
    
    ' Save and close new workbook
    Application.DisplayAlerts = False
    newWb.SaveAs fullOutputPath, FileFormat:=xlOpenXMLWorkbook
    newWb.Close SaveChanges:=False
    Application.DisplayAlerts = True
    
    Set newWb = Nothing
    Set newWs = Nothing
    Exit Sub
    
SaveError:
    Application.DisplayAlerts = True
    If Not newWb Is Nothing Then
        newWb.Close SaveChanges:=False
        Set newWb = Nothing
    End If
    MsgBox "Error saving summary file: " & Err.Description, vbExclamation, "Save Error"
    
End Sub



