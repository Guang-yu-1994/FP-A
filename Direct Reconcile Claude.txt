Option Explicit

'==================================================================================================
' Global variables for statistics
'==================================================================================================
Private g_TotalXlsFiles As Long
Private g_TotalACTFolders As Long

'==================================================================================================
' Main Procedure: Enhanced version with statistics and memory optimization
' Can be run directly - all dependencies included
'==================================================================================================
Sub Main_ProcessAllFiles()

    ' --- Configuration Section ---
    Const ROOT_FOLDER_NAME As String = "DirectSale Reconcile Inputs"
    Const FOLDER_KEYWORD As String = "ACT"
    Const FILE_KEYWORD As String = "ACT"
    ' --- End Configuration Section ---

    Dim fso As Object
    Dim rootFolder As Object
    Dim subFolder As Object
    Dim fileItem As Object
    Dim basePath As String
    Dim wsSummary As Worksheet
    Dim wsTemp As Worksheet

    ' Initialize statistics
    g_TotalXlsFiles = 0
    g_TotalACTFolders = 0

    Set fso = CreateObject("Scripting.FileSystemObject")
    basePath = ThisWorkbook.Path & "\" & ROOT_FOLDER_NAME

    If Not fso.FolderExists(basePath) Then
        MsgBox "Error: Data source folder '" & basePath & "' not found.", vbCritical, "Folder Not Found"
        Exit Sub
    End If

    ' Optimize performance
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual

    On Error GoTo ErrorHandler

    ' Setup worksheets
    SetupSheets wsSummary, wsTemp

    Set rootFolder = fso.GetFolder(basePath)

    ' Loop through subfolders
    For Each subFolder In rootFolder.SubFolders
        If InStr(1, subFolder.Name, FOLDER_KEYWORD, vbTextCompare) > 0 Then
            g_TotalACTFolders = g_TotalACTFolders + 1
            
            ' Loop through files in subfolder
            For Each fileItem In subFolder.Files
                If InStr(1, fileItem.Name, FILE_KEYWORD, vbTextCompare) > 0 And _
                   LCase(fso.GetExtensionName(fileItem.Name)) = "xls" Then
                    g_TotalXlsFiles = g_TotalXlsFiles + 1
                    
                    ' Process single file with enhanced error handling
                    ProcessSingleFileEnhanced fileItem.Path, wsSummary, wsTemp
                    
                    ' Force memory cleanup
                    DoEvents
                    Application.CutCopyMode = False
                End If
            Next fileItem
        End If
    Next subFolder

    ' Write statistics to A1 cell of current worksheet
    With ThisWorkbook.ActiveSheet
        .Cells(1, 1).Value = "Statistics: Processed " & g_TotalXlsFiles & " XLS files from " & g_TotalACTFolders & " ACT folders"
        .Cells(1, 1).Font.Bold = True
        .Cells(1, 1).Interior.Color = RGB(255, 255, 0) ' Yellow background
        .Columns("A:A").AutoFit
    End With

    MsgBox "All data processing complete!" & vbCrLf & _
           "Processed " & g_TotalXlsFiles & " XLS files" & vbCrLf & _
           "from " & g_TotalACTFolders & " ACT folders" & vbCrLf & _
           "Please check 'Summary Sheet'.", vbInformation, "Processing Complete"

CleanUp:
    ' Restore Excel settings
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    
    ' Clean up objects
    Set fso = Nothing
    Set rootFolder = Nothing
    Set subFolder = Nothing
    Set fileItem = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "Error in main procedure: " & Err.Description, vbCritical, "Error"
    Resume CleanUp

End Sub

'==================================================================================================
' Helper Procedure: Setup worksheets
'==================================================================================================
Sub SetupSheets(ByRef wsSummary As Worksheet, ByRef wsTemp As Worksheet)
    On Error Resume Next
    
    ' Setup temporary worksheet
    Set wsTemp = ThisWorkbook.Sheets("Intermediate Sheet")
    If wsTemp Is Nothing Then
        Set wsTemp = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsTemp.Name = "Intermediate Sheet"
    End If
    wsTemp.Cells.Clear

    ' Setup summary worksheet
    Set wsSummary = ThisWorkbook.Sheets("Summary Sheet")
    If wsSummary Is Nothing Then
        Set wsSummary = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsSummary.Name = "Summary Sheet"
    End If
    wsSummary.Cells.Clear
    On Error GoTo 0

    ' Create header row
    With wsSummary
        .Cells(1, 1).Value = "Submission Date"
        .Cells(1, 2).Value = "Account #"
        .Cells(1, 3).Value = "Expire Date"
        .Cells(1, 4).Value = "Amount"
        ' Format header row
        .Range("A1:D1").Font.Bold = True
        .Range("A1:D1").Interior.Color = RGB(200, 200, 200)
    End With
End Sub

'==================================================================================================
' Enhanced file processing with multiple fallback methods
'==================================================================================================
Sub ProcessSingleFileEnhanced(ByVal fullPath As String, ByVal wsSummary As Worksheet, ByVal wsTemp As Worksheet)
    
    On Error Resume Next
    
    ' Method 1: Try ADO connection (fastest, no file opening, bypasses Protected View)
    If ProcessFileWithADO(fullPath, wsSummary, wsTemp) Then
        Exit Sub
    End If
    
    ' Method 2: Try traditional opening with Protected View handling
    ProcessSingleFileTraditional fullPath, wsSummary, wsTemp
    
End Sub

'==================================================================================================
' Method 1: ADO Connection (No file opening, solves Protected View and memory issues)
'==================================================================================================
Function ProcessFileWithADO(ByVal fullPath As String, ByVal wsSummary As Worksheet, ByVal wsTemp As Worksheet) As Boolean
    
    Dim conn As Object
    Dim rs As Object
    Dim sql As String
    Dim connectionString As String
    Dim worksheetName As String
    
    On Error GoTo ADOCleanup
    
    ' Create ADO objects
    Set conn = CreateObject("ADODB.Connection")
    Set rs = CreateObject("ADODB.Recordset")
    
    ' Build connection string for Excel files
    connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                      "Data Source=" & fullPath & ";" & _
                      "Extended Properties=""Excel 8.0;HDR=Yes;IMEX=1;"";"
    
    ' Try to open connection
    conn.Open connectionString
    
    ' Get first worksheet name
    Set rs = conn.OpenSchema(20) ' 20 = adSchemaTables
    If Not rs.EOF Then
        worksheetName = rs.Fields("TABLE_NAME").Value
        ' Remove $ suffix if present
        If Right(worksheetName, 1) = "$" Then
            worksheetName = Left(worksheetName, Len(worksheetName) - 1)
        End If
    Else
        GoTo ADOCleanup
    End If
    rs.Close
    
    ' Define columns to search for
    Dim searchColumns As Variant
    searchColumns = Array( _
        Array("Submission Date", 1), _
        Array("Account #", 2), _
        Array("Expire Date", 3), _
        Array("Amount", 4) _
    )
    
    Dim i As Integer
    Dim nextRow As Long
    Dim colName As String
    Dim targetCol As Integer
    
    ' Process each required column
    For i = LBound(searchColumns) To UBound(searchColumns)
        colName = searchColumns(i)(0)
        targetCol = searchColumns(i)(1)
        
        ' Build SQL query
        sql = "SELECT [" & colName & "] FROM [" & worksheetName & "$] WHERE [" & colName & "] IS NOT NULL AND [" & colName & "] <> ''"
        
        On Error Resume Next
        Set rs = CreateObject("ADODB.Recordset")
        rs.Open sql, conn, 1, 1 ' adOpenKeyset, adLockReadOnly
        
        If Err.Number = 0 And Not rs.EOF Then
            ' Find next empty row in summary sheet
            nextRow = wsSummary.Cells(wsSummary.Rows.Count, targetCol).End(xlUp).Row + 1
            
            ' Skip header if we're starting from row 1
            If nextRow = 1 Then nextRow = 2
            
            ' Copy data row by row
            Do While Not rs.EOF
                Dim cellValue As String
                cellValue = Trim(CStr(rs.Fields(0).Value & ""))
                
                ' Filter out invalid data
                If cellValue <> "" And cellValue <> colName And _
                   Not (colName = "Submission Date" And InStr(1, cellValue, "Submission Count", vbTextCompare) > 0) Then
                    wsSummary.Cells(nextRow, targetCol).Value = rs.Fields(0).Value
                    nextRow = nextRow + 1
                End If
                
                rs.MoveNext
            Loop
            
            rs.Close
        End If
        On Error GoTo ADOCleanup
        
        Set rs = Nothing
    Next i
    
    conn.Close
    Set conn = Nothing
    
    ProcessFileWithADO = True
    Exit Function
    
ADOCleanup:
    On Error Resume Next
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    If Not conn Is Nothing Then
        conn.Close
        Set conn = Nothing
    End If
    ProcessFileWithADO = False

End Function

'==================================================================================================
' Method 2: Traditional file opening with Protected View handling
'==================================================================================================
Sub ProcessSingleFileTraditional(ByVal fullPath As String, ByVal wsSummary As Worksheet, ByVal wsTemp As Worksheet)

    Dim wbSource As Workbook
    Dim wsSource As Worksheet
    Dim findRange As Range
    Dim lastRowSource As Long
    Dim lastRowTemp As Long
    Dim nextSummaryRow As Long
    Dim colCounter As Integer
    Dim searchKey As Variant
    Dim targetColumnSource As Long
    Dim tempColOffset As Long
    Dim i As Long
    Dim copyCurrentColumn As Boolean

    Dim searchKeys As Variant
    searchKeys = Array( _
        Array("Submission Date", 1, True), _
        Array("Account #", 2, False), _
        Array("Expire Date", 3, True), _
        Array("Amount", 4, False) _
    )

    On Error GoTo ErrorHandler

    ' Try to open file with multiple parameters to avoid Protected View
    Set wbSource = Application.Workbooks.Open( _
        Filename:=fullPath, _
        ReadOnly:=True, _
        UpdateLinks:=False, _
        AddToMru:=False, _
        IgnoreReadOnlyRecommended:=True, _
        CorruptLoad:=xlExtractData _
    )

    ' Handle Protected View if present
    On Error Resume Next
    If Not wbSource.ProtectedViewWindow Is Nothing Then
        wbSource.ProtectedViewWindow.Edit
        DoEvents ' Wait for edit mode to enable
    End If
    On Error GoTo ErrorHandler

    Set wsSource = wbSource.Sheets(1)

    ' Process each search key
    For colCounter = LBound(searchKeys) To UBound(searchKeys)
        searchKey = searchKeys(colCounter)(0)
        tempColOffset = searchKeys(colCounter)(1)
        copyCurrentColumn = searchKeys(colCounter)(2)

        wsTemp.Cells.ClearContents

        Set findRange = wsSource.Cells.Find( _
            What:=searchKey, _
            LookIn:=xlValues, _
            LookAt:=xlWhole, _
            MatchCase:=False _
        )

        If Not findRange Is Nothing Then
            If copyCurrentColumn Then
                targetColumnSource = findRange.Column
            Else
                targetColumnSource = findRange.Column - 1
                If targetColumnSource < 1 Then GoTo NextKey
            End If

            lastRowSource = wsSource.Cells(wsSource.Rows.Count, targetColumnSource).End(xlUp).Row
            If lastRowSource <= findRange.Row Then GoTo NextKey

            ' Copy data to temporary worksheet
            wsSource.Range( _
                wsSource.Cells(findRange.Row + 1, targetColumnSource), _
                wsSource.Cells(lastRowSource, targetColumnSource) _
            ).Copy
            
            wsTemp.Cells(2, 1).PasteSpecial xlPasteValuesAndNumberFormats
            Application.CutCopyMode = False

            ' Clean data (remove empty rows and duplicate headers)
            lastRowTemp = wsTemp.Cells(wsTemp.Rows.Count, 1).End(xlUp).Row
            If lastRowTemp >= 2 Then
                For i = lastRowTemp To 2 Step -1
                    Dim cellValue As String
                    cellValue = Trim(wsTemp.Cells(i, 1).Value & "")
                    If cellValue = "" Or cellValue = CStr(searchKey) Or _
                       (CStr(searchKey) = "Submission Date" And InStr(1, cellValue, "Submission Count", vbTextCompare) > 0) Then
                        wsTemp.Rows(i).Delete
                    End If
                Next i
            End If

            ' Copy cleaned data to summary sheet
            lastRowTemp = wsTemp.Cells(wsTemp.Rows.Count, 1).End(xlUp).Row
            If lastRowTemp >= 2 Then
                nextSummaryRow = wsSummary.Cells(wsSummary.Rows.Count, tempColOffset).End(xlUp).Row + 1
                wsTemp.Range("A2:A" & lastRowTemp).Copy
                wsSummary.Cells(nextSummaryRow, tempColOffset).PasteSpecial xlPasteValuesAndNumberFormats
                Application.CutCopyMode = False
            End If
        End If

NextKey:
    Next colCounter

CleanUp:
    If Not wbSource Is Nothing Then
        wbSource.Close SaveChanges:=False
        Set wbSource = Nothing
        Set wsSource = Nothing
    End If
    
    ' Force garbage collection
    DoEvents
    Exit Sub

ErrorHandler:
    ' Silent error handling for individual files - continue processing other files
    Resume CleanUp

End Sub
