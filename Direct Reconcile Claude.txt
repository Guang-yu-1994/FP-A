Option Explicit

'==================================================================================================
' Global variables for statistics
'==================================================================================================
Private g_TotalXlsFiles As Long
Private g_TotalACTFolders As Long

'==================================================================================================
' Main Procedure: Fixed data corruption and added output folder functionality
'==================================================================================================
Sub Main_ProcessAllFiles()

    ' --- Configuration Section ---
    Const ROOT_FOLDER_NAME As String = "DirectSale Reconcile Inputs"
    Const OUTPUT_FOLDER_NAME As String = "DirectSale Reconcile Outputs"
    Const FOLDER_KEYWORD As String = "ACT"
    Const FILE_KEYWORD As String = "ACT"
    ' --- End Configuration Section ---

    Dim fso As Object
    Dim rootFolder As Object
    Dim subFolder As Object
    Dim fileItem As Object
    Dim basePath As String
    Dim outputPath As String
    Dim wsSummary As Worksheet
    Dim wsTemp As Worksheet

    ' Initialize statistics
    g_TotalXlsFiles = 0
    g_TotalACTFolders = 0

    Set fso = CreateObject("Scripting.FileSystemObject")
    basePath = ThisWorkbook.Path & "\" & ROOT_FOLDER_NAME
    outputPath = ThisWorkbook.Path & "\" & OUTPUT_FOLDER_NAME

    ' Check input folder
    If Not fso.FolderExists(basePath) Then
        MsgBox "Error: Data source folder '" & basePath & "' not found.", vbCritical, "Folder Not Found"
        Exit Sub
    End If

    ' Create output folder if it doesn't exist
    If Not fso.FolderExists(outputPath) Then
        fso.CreateFolder outputPath
    End If

    ' Optimize performance but keep alerts for file corruption warnings
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    ' Note: Keep DisplayAlerts = True to see file corruption warnings

    On Error GoTo ErrorHandler

    ' Setup worksheets
    SetupSheets wsSummary, wsTemp

    Set rootFolder = fso.GetFolder(basePath)

    ' Loop through subfolders
    For Each subFolder In rootFolder.SubFolders
        If InStr(1, subFolder.Name, FOLDER_KEYWORD, vbTextCompare) > 0 Then
            g_TotalACTFolders = g_TotalACTFolders + 1
            
            ' Loop through files in subfolder
            For Each fileItem In subFolder.Files
                If InStr(1, fileItem.Name, FILE_KEYWORD, vbTextCompare) > 0 And _
                   (LCase(fso.GetExtensionName(fileItem.Name)) = "xls" Or _
                    LCase(fso.GetExtensionName(fileItem.Name)) = "xlsx") Then
                    g_TotalXlsFiles = g_TotalXlsFiles + 1
                    
                    ' Process single file with corruption handling
                    ProcessSingleFileRobust fileItem.Path, wsSummary, wsTemp
                    
                    ' Force memory cleanup after each file
                    ForceMemoryCleanup
                End If
            Next fileItem
        End If
    Next subFolder

    ' Write statistics to Sheet1 A1 cell
    WriteStatisticsToSheet1

    ' Save Summary Sheet as separate workbook
    SaveSummarySheetAsNewWorkbook wsSummary, outputPath

    MsgBox "All data processing complete!" & vbCrLf & _
           "Processed " & g_TotalXlsFiles & " XLS files" & vbCrLf & _
           "from " & g_TotalACTFolders & " ACT folders" & vbCrLf & _
           "Summary saved to: " & outputPath, vbInformation, "Processing Complete"

CleanUp:
    ' Restore Excel settings
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    
    ' Clean up objects
    Set fso = Nothing
    Set rootFolder = Nothing
    Set subFolder = Nothing
    Set fileItem = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "Error in main procedure: " & Err.Description, vbCritical, "Error"
    Resume CleanUp

End Sub

'==================================================================================================
' Write statistics to Sheet1 A1 cell
'==================================================================================================
Sub WriteStatisticsToSheet1()
    Dim ws1 As Worksheet
    
    On Error Resume Next
    Set ws1 = ThisWorkbook.Sheets("Sheet1")
    If ws1 Is Nothing Then
        Set ws1 = ThisWorkbook.Sheets(1) ' Use first sheet if Sheet1 doesn't exist
    End If
    On Error GoTo 0
    
    With ws1
        .Cells(1, 1).Value = "Statistics: Processed " & g_TotalXlsFiles & " XLS files from " & g_TotalACTFolders & " ACT folders"
        .Cells(1, 1).Font.Bold = True
        .Cells(1, 1).Interior.Color = RGB(255, 255, 0)
        .Columns("A:A").AutoFit
    End With
End Sub

'==================================================================================================
' Save Summary Sheet as separate workbook in output folder
'==================================================================================================
Sub SaveSummarySheetAsNewWorkbook(ByVal wsSummary As Worksheet, ByVal outputPath As String)
    Dim newWb As Workbook
    Dim newWs As Worksheet
    Dim fileName As String
    Dim fullOutputPath As String
    
    On Error GoTo SaveError
    
    ' Create new workbook
    Set newWb = Application.Workbooks.Add
    Set newWs = newWb.Sheets(1)
    newWs.Name = "Summary Data"
    
    ' Copy all data from summary sheet to new workbook
    wsSummary.UsedRange.Copy
    newWs.Range("A1").PasteSpecial xlPasteAll
    Application.CutCopyMode = False
    
    ' Format the new worksheet
    With newWs
        .Range("A1:D1").Font.Bold = True
        .Range("A1:D1").Interior.Color = RGB(200, 200, 200)
        .Columns("A:D").AutoFit
    End With
    
    ' Generate filename with timestamp
    fileName = "Summary_" & Format(Now, "yyyymmdd_hhmmss") & ".xlsx"
    fullOutputPath = outputPath & "\" & fileName
    
    ' Save and close new workbook
    Application.DisplayAlerts = False
    newWb.SaveAs fullOutputPath, FileFormat:=xlOpenXMLWorkbook
    newWb.Close SaveChanges:=False
    Application.DisplayAlerts = True
    
    Set newWb = Nothing
    Set newWs = Nothing
    Exit Sub
    
SaveError:
    Application.DisplayAlerts = True
    If Not newWb Is Nothing Then
        newWb.Close SaveChanges:=False
        Set newWb = Nothing
    End If
    MsgBox "Error saving summary file: " & Err.Description, vbExclamation, "Save Error"
    
End Sub

'==================================================================================================
' Helper Procedure: Setup worksheets
'==================================================================================================
Sub SetupSheets(ByRef wsSummary As Worksheet, ByRef wsTemp As Worksheet)
    On Error Resume Next
    
    ' Setup temporary worksheet
    Set wsTemp = ThisWorkbook.Sheets("Intermediate Sheet")
    If wsTemp Is Nothing Then
        Set wsTemp = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsTemp.Name = "Intermediate Sheet"
    End If
    wsTemp.Cells.Clear

    ' Setup summary worksheet
    Set wsSummary = ThisWorkbook.Sheets("Summary Sheet")
    If wsSummary Is Nothing Then
        Set wsSummary = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsSummary.Name = "Summary Sheet"
    End If
    wsSummary.Cells.Clear
    On Error GoTo 0

    ' Create header row
    With wsSummary
        .Cells(1, 1).Value = "Submission Date"
        .Cells(1, 2).Value = "Account #"
        .Cells(1, 3).Value = "Expire Date"
        .Cells(1, 4).Value = "Amount"
        ' Format header row
        .Range("A1:D1").Font.Bold = True
        .Range("A1:D1").Interior.Color = RGB(200, 200, 200)
    End With
End Sub

'==================================================================================================
' Robust file processing with corruption handling
'==================================================================================================
Sub ProcessSingleFileRobust(ByVal fullPath As String, ByVal wsSummary As Worksheet, ByVal wsTemp As Worksheet)

    Dim wbSource As Workbook
    Dim wsSource As Worksheet
    Dim findRange As Range
    Dim lastRowSource As Long
    Dim lastRowTemp As Long
    Dim nextSummaryRow As Long
    Dim colCounter As Integer
    Dim searchKey As Variant
    Dim targetColumnSource As Long
    Dim tempColOffset As Long
    Dim i As Long
    Dim copyCurrentColumn As Boolean

    ' Define search parameters
    Dim searchKeys As Variant
    searchKeys = Array( _
        Array("Submission Date", 1, True), _
        Array("Account #", 2, False), _
        Array("Expire Date", 3, True), _
        Array("Amount", 4, False) _
    )

    On Error GoTo ErrorHandler

    ' Open file with enhanced error handling for corrupted files
    Set wbSource = OpenFileRobust(fullPath)
    If wbSource Is Nothing Then GoTo ErrorHandler

    ' Always use the first worksheet
    Set wsSource = wbSource.Sheets(1)

    ' Process each search key
    For colCounter = LBound(searchKeys) To UBound(searchKeys)
        searchKey = searchKeys(colCounter)(0)
        tempColOffset = searchKeys(colCounter)(1)
        copyCurrentColumn = searchKeys(colCounter)(2)

        ' Clear temporary worksheet
        wsTemp.Cells.ClearContents

        ' Find the keyword with enhanced search
        Set findRange = FindKeywordRobust(wsSource, CStr(searchKey))

        If Not findRange Is Nothing Then
            ' Determine target column
            If copyCurrentColumn Then
                targetColumnSource = findRange.Column
            Else
                targetColumnSource = findRange.Column - 1
                If targetColumnSource < 1 Then GoTo NextKey
            End If

            ' Find last row with data
            lastRowSource = wsSource.Cells(wsSource.Rows.Count, targetColumnSource).End(xlUp).Row
            If lastRowSource <= findRange.Row Then GoTo NextKey

            ' Copy data using values only (prevents formula corruption)
            CopyDataSafely wsSource, wsTemp, findRange.Row + 1, lastRowSource, targetColumnSource

            ' Clean data efficiently
            CleanDataInPlace wsTemp, CStr(searchKey)

            ' Copy cleaned data to summary
            CopyCleanedDataToSummary wsTemp, wsSummary, tempColOffset
        End If

NextKey:
        ' Clear objects after each key
        Set findRange = Nothing
        
    Next colCounter

CleanUp:
    ' Close source file immediately
    If Not wbSource Is Nothing Then
        wbSource.Close SaveChanges:=False
        Set wbSource = Nothing
        Set wsSource = Nothing
    End If
    
    ForceMemoryCleanup
    Exit Sub

ErrorHandler:
    ' Log error but continue processing other files
    Debug.Print "Error processing file: " & fullPath & " - " & Err.Description
    Resume CleanUp

End Sub

'==================================================================================================
' Enhanced file opening to handle corruption
'==================================================================================================
Function OpenFileRobust(ByVal fullPath As String) As Workbook
    Dim wb As Workbook
    
    On Error Resume Next
    
    ' Method 1: Try with corruption recovery
    Set wb = Application.Workbooks.Open( _
        Filename:=fullPath, _
        ReadOnly:=True, _
        UpdateLinks:=False, _
        AddToMru:=False, _
        IgnoreReadOnlyRecommended:=True, _
        CorruptLoad:=xlRepairFile _
    )
    
    If Not wb Is Nothing Then
        ' Handle Protected View if present
        If Not wb.ProtectedViewWindow Is Nothing Then
            wb.ProtectedViewWindow.Edit
            DoEvents
        End If
        Set OpenFileRobust = wb
        Exit Function
    End If
    
    ' Method 2: Try with extract data if repair fails
    Set wb = Application.Workbooks.Open( _
        Filename:=fullPath, _
        ReadOnly:=True, _
        CorruptLoad:=xlExtractData _
    )
    
    If Not wb Is Nothing Then
        Set OpenFileRobust = wb
        Exit Function
    End If
    
    ' Method 3: Basic open as last resort
    Set wb = Application.Workbooks.Open(fullPath, ReadOnly:=True)
    Set OpenFileRobust = wb
    
End Function

'==================================================================================================
' Enhanced keyword finding with multiple attempts
'==================================================================================================
Function FindKeywordRobust(ByVal ws As Worksheet, ByVal keyword As String) As Range
    Dim foundRange As Range
    
    On Error Resume Next
    
    ' Try exact match first
    Set foundRange = ws.Cells.Find( _
        What:=keyword, _
        LookIn:=xlValues, _
        LookAt:=xlWhole, _
        MatchCase:=False _
    )
    
    If Not foundRange Is Nothing Then
        Set FindKeywordRobust = foundRange
        Exit Function
    End If
    
    ' Try partial match if exact match fails
    Set foundRange = ws.Cells.Find( _
        What:=keyword, _
        LookIn:=xlValues, _
        LookAt:=xlPart, _
        MatchCase:=False _
    )
    
    Set FindKeywordRobust = foundRange
    
End Function

'==================================================================================================
' Safe data copying to prevent corruption
'==================================================================================================
Sub CopyDataSafely(ByVal wsSource As Worksheet, ByVal wsTemp As Worksheet, _
                   ByVal startRow As Long, ByVal endRow As Long, ByVal sourceCol As Long)
    
    Dim i As Long
    Dim tempRow As Long
    Dim cellVal As Variant
    
    On Error Resume Next
    
    tempRow = 2 ' Start from row 2 in temp sheet
    
    ' Copy data row by row to handle corrupted cells
    For i = startRow To endRow
        cellVal = wsSource.Cells(i, sourceCol).Value
        
        ' Only copy if value is not an error
        If Not IsError(cellVal) Then
            wsTemp.Cells(tempRow, 1).Value = cellVal
            tempRow = tempRow + 1
        End If
    Next i
    
End Sub

'==================================================================================================
' Efficient in-place data cleaning
'==================================================================================================
Sub CleanDataInPlace(ByVal wsTemp As Worksheet, ByVal searchKey As String)
    Dim lastRow As Long
    Dim i As Long
    Dim cellValue As String
    
    lastRow = wsTemp.Cells(wsTemp.Rows.Count, 1).End(xlUp).Row
    
    If lastRow >= 2 Then
        ' Process from bottom to top when deleting rows
        For i = lastRow To 2 Step -1
            cellValue = Trim(CStr(wsTemp.Cells(i, 1).Value))
            
            ' Remove empty cells, duplicate headers, and specific unwanted content
            If cellValue = "" Or _
               cellValue = CStr(searchKey) Or _
               (CStr(searchKey) = "Submission Date" And InStr(1, cellValue, "Submission Count", vbTextCompare) > 0) Then
                wsTemp.Rows(i).Delete
            End If
        Next i
    End If
End Sub

'==================================================================================================
' Efficient copying of cleaned data to summary sheet
'==================================================================================================
Sub CopyCleanedDataToSummary(ByVal wsTemp As Worksheet, ByVal wsSummary As Worksheet, ByVal targetColumn As Integer)
    Dim lastRowTemp As Long
    Dim nextSummaryRow As Long
    Dim i As Long
    
    lastRowTemp = wsTemp.Cells(wsTemp.Rows.Count, 1).End(xlUp).Row
    
    If lastRowTemp >= 2 Then
        ' Find next available row in summary sheet
        nextSummaryRow = wsSummary.Cells(wsSummary.Rows.Count, targetColumn).End(xlUp).Row + 1
        
        ' Ensure we don't overwrite headers
        If nextSummaryRow = 1 Then nextSummaryRow = 2
        
        ' Copy data cell by cell to avoid corruption
        For i = 2 To lastRowTemp
            If Not IsError(wsTemp.Cells(i, 1).Value) And wsTemp.Cells(i, 1).Value <> "" Then
                wsSummary.Cells(nextSummaryRow, targetColumn).Value = wsTemp.Cells(i, 1).Value
                nextSummaryRow = nextSummaryRow + 1
            End If
        Next i
    End If
End Sub

'==================================================================================================
' Helper Procedure: Setup worksheets
'==================================================================================================
Sub SetupSheets(ByRef wsSummary As Worksheet, ByRef wsTemp As Worksheet)
    On Error Resume Next
    
    ' Setup temporary worksheet
    Set wsTemp = ThisWorkbook.Sheets("Intermediate Sheet")
    If wsTemp Is Nothing Then
        Set wsTemp = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsTemp.Name = "Intermediate Sheet"
    End If
    wsTemp.Cells.Clear

    ' Setup summary worksheet
    Set wsSummary = ThisWorkbook.Sheets("Summary Sheet")
    If wsSummary Is Nothing Then
        Set wsSummary = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsSummary.Name = "Summary Sheet"
    End If
    wsSummary.Cells.Clear
    On Error GoTo 0

    ' Create header row
    With wsSummary
        .Cells(1, 1).Value = "Submission Date"
        .Cells(1, 2).Value = "Account #"
        .Cells(1, 3).Value = "Expire Date"
        .Cells(1, 4).Value = "Amount"
        ' Format header row
        .Range("A1:D1").Font.Bold = True
        .Range("A1:D1").Interior.Color = RGB(200, 200, 200)
    End With
End Sub

'==================================================================================================
' Save Summary Sheet as separate workbook with timestamp
'==================================================================================================
Sub SaveSummarySheetAsNewWorkbook(ByVal wsSummary As Worksheet, ByVal outputPath As String)
    Dim newWb As Workbook
    Dim newWs As Worksheet
    Dim fileName As String
    Dim fullOutputPath As String
    
    On Error GoTo SaveError
    
    ' Create new workbook
    Set newWb = Application.Workbooks.Add
    Set newWs = newWb.Sheets(1)
    newWs.Name = "Reconciliation Summary"
    
    ' Copy data using values to prevent formula issues
    If wsSummary.UsedRange.Rows.Count > 0 Then
        newWs.Range("A1").Resize(wsSummary.UsedRange.Rows.Count, wsSummary.UsedRange.Columns.Count).Value = wsSummary.UsedRange.Value
    End If
    
    ' Format the new worksheet
    With newWs
        .Range("A1:D1").Font.Bold = True
        .Range("A1:D1").Interior.Color = RGB(200, 200, 200)
        .Columns("A:D").AutoFit
    End With
    
    ' Generate filename with timestamp
    fileName = "Reconciliation_Summary_" & Format(Now, "yyyymmdd_hhmmss") & ".xlsx"
    fullOutputPath = outputPath & "\" & fileName
    
    ' Save and close new workbook
    Application.DisplayAlerts = False
    newWb.SaveAs fullOutputPath, FileFormat:=xlOpenXMLWorkbook
    newWb.Close SaveChanges:=False
    Application.DisplayAlerts = True
    
    Set newWb = Nothing
    Set newWs = Nothing
    Exit Sub
    
SaveError:
    Application.DisplayAlerts = True
    If Not newWb Is Nothing Then
        newWb.Close SaveChanges:=False
        Set newWb = Nothing
    End If
    MsgBox "Error saving summary file to: " & outputPath & vbCrLf & "Error: " & Err.Description, vbExclamation, "Save Error"
    
End Sub

'==================================================================================================
' Aggressive memory cleanup
'==================================================================================================
Sub ForceMemoryCleanup()
    ' Clear clipboard
    Application.CutCopyMode = False
    
    ' Force Excel to process pending events
    DoEvents
    
    ' Clear undo stack to free memory
    Application.OnUndo "", ""
End Sub
