Option Explicit

'==================================================================================================
' Global variables for statistics
'==================================================================================================
Private g_TotalXlsFiles As Long
Private g_TotalACTFolders As Long

'==================================================================================================
' Main Procedure: Optimized for irregular data with memory management
'==================================================================================================
Sub Main_ProcessAllFiles()

    ' --- Configuration Section ---
    Const ROOT_FOLDER_NAME As String = "DirectSale Reconcile Inputs"
    Const FOLDER_KEYWORD As String = "ACT"
    Const FILE_KEYWORD As String = "ACT"
    ' --- End Configuration Section ---

    Dim fso As Object
    Dim rootFolder As Object
    Dim subFolder As Object
    Dim fileItem As Object
    Dim basePath As String
    Dim wsSummary As Worksheet
    Dim wsTemp As Worksheet

    ' Initialize statistics
    g_TotalXlsFiles = 0
    g_TotalACTFolders = 0

    Set fso = CreateObject("Scripting.FileSystemObject")
    basePath = ThisWorkbook.Path & "\" & ROOT_FOLDER_NAME

    If Not fso.FolderExists(basePath) Then
        MsgBox "Error: Data source folder '" & basePath & "' not found.", vbCritical, "Folder Not Found"
        Exit Sub
    End If

    ' Optimize performance
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual

    On Error GoTo ErrorHandler

    ' Setup worksheets
    SetupSheets wsSummary, wsTemp

    Set rootFolder = fso.GetFolder(basePath)

    ' Loop through subfolders
    For Each subFolder In rootFolder.SubFolders
        If InStr(1, subFolder.Name, FOLDER_KEYWORD, vbTextCompare) > 0 Then
            g_TotalACTFolders = g_TotalACTFolders + 1
            
            ' Loop through files in subfolder
            For Each fileItem In subFolder.Files
                If InStr(1, fileItem.Name, FILE_KEYWORD, vbTextCompare) > 0 And _
                   LCase(fso.GetExtensionName(fileItem.Name)) = "xls" Then
                    g_TotalXlsFiles = g_TotalXlsFiles + 1
                    
                    ' Process single file with memory optimization
                    ProcessSingleFileOptimized fileItem.Path, wsSummary, wsTemp
                    
                    ' Aggressive memory cleanup after each file
                    ForceMemoryCleanup
                End If
            Next fileItem
        End If
    Next subFolder

    ' Write statistics to A1 cell of current worksheet
    With ThisWorkbook.ActiveSheet
        .Cells(1, 1).Value = "Statistics: Processed " & g_TotalXlsFiles & " XLS files from " & g_TotalACTFolders & " ACT folders"
        .Cells(1, 1).Font.Bold = True
        .Cells(1, 1).Interior.Color = RGB(255, 255, 0)
        .Columns("A:A").AutoFit
    End With

    MsgBox "All data processing complete!" & vbCrLf & _
           "Processed " & g_TotalXlsFiles & " XLS files" & vbCrLf & _
           "from " & g_TotalACTFolders & " ACT folders" & vbCrLf & _
           "Please check 'Summary Sheet'.", vbInformation, "Processing Complete"

CleanUp:
    ' Restore Excel settings
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    
    ' Clean up objects
    Set fso = Nothing
    Set rootFolder = Nothing
    Set subFolder = Nothing
    Set fileItem = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "Error in main procedure: " & Err.Description, vbCritical, "Error"
    Resume CleanUp

End Sub

'==================================================================================================
' Helper Procedure: Setup worksheets
'==================================================================================================
Sub SetupSheets(ByRef wsSummary As Worksheet, ByRef wsTemp As Worksheet)
    On Error Resume Next
    
    ' Setup temporary worksheet
    Set wsTemp = ThisWorkbook.Sheets("Intermediate Sheet")
    If wsTemp Is Nothing Then
        Set wsTemp = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsTemp.Name = "Intermediate Sheet"
    End If
    wsTemp.Cells.Clear

    ' Setup summary worksheet
    Set wsSummary = ThisWorkbook.Sheets("Summary Sheet")
    If wsSummary Is Nothing Then
        Set wsSummary = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsSummary.Name = "Summary Sheet"
    End If
    wsSummary.Cells.Clear
    On Error GoTo 0

    ' Create header row
    With wsSummary
        .Cells(1, 1).Value = "Submission Date"
        .Cells(1, 2).Value = "Account #"
        .Cells(1, 3).Value = "Expire Date"
        .Cells(1, 4).Value = "Amount"
        ' Format header row
        .Range("A1:D1").Font.Bold = True
        .Range("A1:D1").Interior.Color = RGB(200, 200, 200)
    End With
End Sub

'==================================================================================================
' Optimized file processing with memory management and Protected View handling
' Uses traditional method but with enhanced memory management
'==================================================================================================
Sub ProcessSingleFileOptimized(ByVal fullPath As String, ByVal wsSummary As Worksheet, ByVal wsTemp As Worksheet)

    Dim wbSource As Workbook
    Dim wsSource As Worksheet
    Dim findRange As Range
    Dim lastRowSource As Long
    Dim lastRowTemp As Long
    Dim nextSummaryRow As Long
    Dim colCounter As Integer
    Dim searchKey As Variant
    Dim targetColumnSource As Long
    Dim tempColOffset As Long
    Dim i As Long
    Dim copyCurrentColumn As Boolean
    Dim dataRange As Range

    ' Define search parameters
    Dim searchKeys As Variant
    searchKeys = Array( _
        Array("Submission Date", 1, True), _
        Array("Account #", 2, False), _
        Array("Expire Date", 3, True), _
        Array("Amount", 4, False) _
    )

    On Error GoTo ErrorHandler

    ' Try multiple methods to open the file (handles Protected View)
    Set wbSource = OpenFileWithFallback(fullPath)
    If wbSource Is Nothing Then GoTo ErrorHandler

    Set wsSource = wbSource.Sheets(1)

    ' Process each search key
    For colCounter = LBound(searchKeys) To UBound(searchKeys)
        searchKey = searchKeys(colCounter)(0)
        tempColOffset = searchKeys(colCounter)(1)
        copyCurrentColumn = searchKeys(colCounter)(2)

        ' Clear temporary worksheet for each column
        wsTemp.Cells.ClearContents

        ' Find the keyword
        Set findRange = wsSource.Cells.Find( _
            What:=searchKey, _
            LookIn:=xlValues, _
            LookAt:=xlWhole, _
            MatchCase:=False _
        )

        If Not findRange Is Nothing Then
            ' Determine target column based on parameter
            If copyCurrentColumn Then
                targetColumnSource = findRange.Column
            Else
                targetColumnSource = findRange.Column - 1
                If targetColumnSource < 1 Then GoTo NextKey
            End If

            ' Find the last row with data in target column
            lastRowSource = wsSource.Cells(wsSource.Rows.Count, targetColumnSource).End(xlUp).Row
            If lastRowSource <= findRange.Row Then GoTo NextKey

            ' Use more efficient copying method for large ranges
            Set dataRange = wsSource.Range( _
                wsSource.Cells(findRange.Row + 1, targetColumnSource), _
                wsSource.Cells(lastRowSource, targetColumnSource) _
            )
            
            ' Copy values only (not formulas) to reduce memory usage
            wsTemp.Range("A2").Resize(dataRange.Rows.Count, 1).Value = dataRange.Value
            
            ' Clean data efficiently
            CleanDataInPlace wsTemp, searchKey
            
            ' Copy cleaned data to summary sheet
            CopyCleanedDataToSummary wsTemp, wsSummary, tempColOffset
        End If

NextKey:
        ' Clear temporary data after each key to free memory
        wsTemp.Cells.ClearContents
        Set findRange = Nothing
        Set dataRange = Nothing
        
    Next colCounter

CleanUp:
    ' Close source workbook immediately after processing
    If Not wbSource Is Nothing Then
        wbSource.Close SaveChanges:=False
        Set wbSource = Nothing
        Set wsSource = Nothing
    End If
    
    ' Force memory cleanup
    ForceMemoryCleanup
    Exit Sub

ErrorHandler:
    ' Continue processing other files even if one fails
    Resume CleanUp

End Sub

'==================================================================================================
' Enhanced file opening with Protected View handling
'==================================================================================================
Function OpenFileWithFallback(ByVal fullPath As String) As Workbook
    Dim wb As Workbook
    
    On Error Resume Next
    
    ' Method 1: Standard opening with Protected View handling
    Set wb = Application.Workbooks.Open( _
        Filename:=fullPath, _
        ReadOnly:=True, _
        UpdateLinks:=False, _
        AddToMru:=False, _
        IgnoreReadOnlyRecommended:=True, _
        CorruptLoad:=xlExtractData _
    )
    
    ' Handle Protected View
    If Not wb Is Nothing Then
        If Not wb.ProtectedViewWindow Is Nothing Then
            wb.ProtectedViewWindow.Edit
            DoEvents
        End If
        Set OpenFileWithFallback = wb
        Exit Function
    End If
    
    ' Method 2: Try with different parameters if first method fails
    Set wb = Application.Workbooks.Open( _
        Filename:=fullPath, _
        ReadOnly:=True, _
        UpdateLinks:=False _
    )
    
    If Not wb Is Nothing Then
        Set OpenFileWithFallback = wb
        Exit Function
    End If
    
    ' Method 3: Try basic open as last resort
    Set wb = Application.Workbooks.Open(fullPath)
    Set OpenFileWithFallback = wb
    
End Function

'==================================================================================================
' Efficient in-place data cleaning
'==================================================================================================
Sub CleanDataInPlace(ByVal wsTemp As Worksheet, ByVal searchKey As String)
    Dim lastRow As Long
    Dim i As Long
    Dim cellValue As String
    
    lastRow = wsTemp.Cells(wsTemp.Rows.Count, 1).End(xlUp).Row
    
    If lastRow >= 2 Then
        ' Process from bottom to top when deleting rows
        For i = lastRow To 2 Step -1
            cellValue = Trim(CStr(wsTemp.Cells(i, 1).Value))
            
            ' Remove empty cells, duplicate headers, and specific unwanted content
            If cellValue = "" Or _
               cellValue = CStr(searchKey) Or _
               (CStr(searchKey) = "Submission Date" And InStr(1, cellValue, "Submission Count", vbTextCompare) > 0) Then
                wsTemp.Rows(i).Delete
            End If
        Next i
    End If
End Sub

'==================================================================================================
' Efficient copying of cleaned data to summary sheet
'==================================================================================================
Sub CopyCleanedDataToSummary(ByVal wsTemp As Worksheet, ByVal wsSummary As Worksheet, ByVal targetColumn As Integer)
    Dim lastRowTemp As Long
    Dim nextSummaryRow As Long
    Dim sourceRange As Range
    
    lastRowTemp = wsTemp.Cells(wsTemp.Rows.Count, 1).End(xlUp).Row
    
    If lastRowTemp >= 2 Then
        ' Find next available row in summary sheet
        nextSummaryRow = wsSummary.Cells(wsSummary.Rows.Count, targetColumn).End(xlUp).Row + 1
        
        ' Ensure we don't overwrite headers
        If nextSummaryRow = 1 Then nextSummaryRow = 2
        
        ' Copy data efficiently using Value property (faster than copy/paste)
        Set sourceRange = wsTemp.Range("A2:A" & lastRowTemp)
        wsSummary.Range(wsSummary.Cells(nextSummaryRow, targetColumn), _
                       wsSummary.Cells(nextSummaryRow + sourceRange.Rows.Count - 1, targetColumn)).Value = sourceRange.Value
    End If
End Sub

'==================================================================================================
' Aggressive memory cleanup
'==================================================================================================
Sub ForceMemoryCleanup()
    ' Clear clipboard
    Application.CutCopyMode = False
    
    ' Force Excel to process pending events
    DoEvents
    
    ' Additional cleanup commands
    Application.DisplayAlerts = False
    Application.DisplayAlerts = True
End Sub
